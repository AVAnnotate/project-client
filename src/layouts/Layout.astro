---
import '../style/main.css';
import '@fontsource-variable/open-sans';
import '@fontsource-variable/inter';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import { getEntry } from 'astro:content';

const projectData = await getEntry('project', 'project');

interface Props {
  title?: string;
  projectName?: string;
  projectBy?: string;
}
// Supports weights 300-800

const {
  title = projectData.data.project.title,
  projectName = projectData.data.project.title,
  projectBy = projectData.data.project.creator,
} = Astro.props;
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/my-repo/dist/favicon.svg' />
    <meta name='generator' content={Astro.generator} />

    <!-- google font links -->
    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap'
      rel='stylesheet'
    />
    <title>{title}</title>
  </head>
  <body
    class='bg-gray-100 3xl:bg-black flex h-full flex-col 3xl:max-w-screen-3xl mx-auto'
    transition:animate='initial'
  >
    <Header projectName={projectName} pages={[]} />
    <main
      class='bg-gray-100 min-h-[calc(100dvh_-160px)] max-w-screen-3xl text-black'
    >
      <slot />
    </main>
    <Footer projectBy={projectBy} />
  </body>
</html>

<script>
  import { $pagePlayersState } from 'src/store.ts';
  //initially, reset the loaded players to none
  $pagePlayersState.set({});
  const players = document.getElementsByClassName('mediaContainer');
  for (let i = 0; i < players.length; i++) {
    const thisNode = players[i];
    if (thisNode instanceof HTMLElement && thisNode.dataset.playerId) {
      $pagePlayersState.setKey(thisNode.dataset.playerId, {
        id: thisNode.dataset.playerUrl || '',
        position: 0,
        seekTo: 0,
        isPlaying: false,
        autoScroll: true,
        hideTags: false,
        currentAnnotation: 0,
        searchQuery: '',
        activeFilters: [],
        annotationStarts: [],
      });
    }
  }
</script>
