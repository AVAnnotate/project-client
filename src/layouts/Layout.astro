---
import '../style/main.css';
import '@fontsource-variable/open-sans';
import '@fontsource-variable/inter';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import { getEntry } from 'astro:content';
import { dynamicConfig } from 'dynamic-astro-config';
import { getCollection } from 'astro:content';

interface Props {
  background?: string;
  title?: string;
  class?: string;
}

const projectData = await getEntry('project', 'project');
const eventData = await getCollection('events');

const baseUrl = import.meta.env.PROD
  ? projectData?.data.project.slug
  : dynamicConfig.base;

const {
  background,
  class: className,
  title = projectData?.data.project.title,
} = Astro.props;

const projectBy =
  projectData?.data.project.authors || projectData?.data.project.creator;

const manifests = eventData.map((e) => {
  return e.data.label;
});
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href=`/${baseUrl}/favicon.svg` />
    <meta name='generator' content={Astro.generator} />

    <!-- google font links -->
    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap'
      rel='stylesheet'
    />
    <title>{title}</title>
  </head>
  <body
    class={`flex h-full flex-col mx-auto ${className}`}
    transition:animate='initial'
  >
    <Header />
    <main
      class=`min-h-[calc(100vh-160px)] text-black bg-${background} pb-[80px]`
    >
      <slot />
    </main>
    <Footer projectBy={projectBy || ''} manifests={manifests} />
  </body>
</html>

<script>
  import { defaultState } from '@utils/player.ts';
  import { $pagePlayersState } from 'src/store.ts';
  document.addEventListener('astro:page-load', () => {
    // initially, reset the loaded players to none
    $pagePlayersState.set({});
    const players = document.getElementsByClassName('mediaContainer');
    for (let i = 0; i < players.length; i++) {
      const thisNode = players[i];
      if (thisNode instanceof HTMLElement && thisNode.dataset.playerId) {
        $pagePlayersState.setKey(thisNode.dataset.playerId, {
          ...defaultState,
          id: thisNode.dataset.playerUrl || '',
        });
      }
    }
  });
</script>
