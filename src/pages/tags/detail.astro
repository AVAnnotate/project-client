---
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/Container.astro';
import { dynamicConfig } from '../../../dynamic-astro-config';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { getEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import TagSpectrum from '@components/Tags/TagSpectrum.astro';
import TagPill from '@components/Tags/TagPill';
import React from 'react';

const projectData = await getEntry('project', 'project');

const baseUrl = import.meta.env.PROD
  ? projectData.data.project.slug
  : dynamicConfig.base;

const crumbs = [
  {
    label: 'Home',
    link: `/${baseUrl}`,
  },
  {
    label: 'Index',
    link: `/${baseUrl}/tags`,
  },
  {
    label: 'Tag Groups',
  },
];

const annotationSets = await getCollection('annotations');

// check whether there actually are any annotation files
if (annotationSets.length === 0) {
  return Astro.redirect(`/${baseUrl}`);
}

const events = await getCollection('events');

// create a sets array that includes the label for the corresponding event
const labeledSets = annotationSets.map((set) => {
  const event = events.find((ev) => ev.id === set.data.event_id);
  const eventLabel = event ? event.data.label : '';

  return {
    ...set,
    eventLabel,
  };
});

const tagData: {
  [category: string]: {
    color: string;
    tags: {
      tag: string;
    }[];
  };
} = {};

projectData.data.project.tags.tagGroups.forEach(
  (group: { category: string; color: string }) => {
    tagData[group.category] = {
      color: group.color,
      tags: [],
    };
  }
);

projectData.data.project.tags.tags.forEach(
  (tag: { tag: string; category: string }) => {
    tagData[tag.category].tags.push({
      tag: tag.tag,
    });
  }
);
---

<Layout title={`Tag Detail - ${projectData.data.project.title}`}>
  <div class='w-full bg-white h-[50px] font-inter'>
    <Breadcrumbs crumbs={crumbs} />
  </div>
  <Container className='py-12 flex flex-col gap-8 font-inter'>
    <h1 class='text-2xl'>Tag Groups used in Events</h1>
    <div class='flex flex-row gap-2'>
      {
        Object.keys(tagData).map((cat) => (
          <TagPill color={tagData[cat].color} tag={cat.replaceAll('_', '')} />
        ))
      }
    </div>
    {
      Object.keys(tagData).map((cat) => (
        <>
          {tagData[cat].tags.length > 0 ? (
            <div class='w-full py-6 flex flex-col gap-6'>
              <h3 class='text-lg capitalize'>{cat.replaceAll('_', '')}</h3>
              {labeledSets.map((set) => (
                <div class='flex flex-col gap-4'>
                  <p>{set.eventLabel}</p>
                  <TagSpectrum set={set.id} category={cat} />
                </div>
              ))}
            </div>
          ) : null}
        </>
      ))
    }
  </Container>
</Layout>
