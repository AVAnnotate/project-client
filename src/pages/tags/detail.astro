---
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/Container.astro';
import { dynamicConfig } from '../../../dynamic-astro-config';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { getEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import AnnotationSpectrum from '@components/Tags/AnnotationSpectrum.astro';
import TagPill from '@components/Tags/TagPill';

const projectData = await getEntry('project', 'project');

const baseUrl = import.meta.env.PROD
  ? projectData.data.project.slug
  : dynamicConfig.base;

const crumbs = [
  {
    label: 'Home',
    link: `/${baseUrl}`,
  },
  {
    label: 'Index',
    link: `/${baseUrl}/tags`,
  },
  {
    label: 'Tag Groups',
  },
];

const annotationSets = await getCollection('annotations');

// check whether there actually are any annotation files
if (annotationSets.length === 0) {
  return Astro.redirect(`/${baseUrl}`);
}

const events = await getCollection('events');
---

<Layout title={`Tag Detail - ${projectData.data.project.title}`}>
  <div class='w-full bg-white h-[50px] font-inter'>
    <Breadcrumbs crumbs={crumbs} />
  </div>
  <Container className='py-12 flex flex-col gap-8 font-inter'>
    <h1 class='text-2xl'>Tag Groups used in Events</h1>
    <div class='flex flex-row gap-2'>
      {
        projectData.data.project.tags.tagGroups.map((tg) => (
          <TagPill color={tg.color} tag={tg.category.replaceAll('_', '')} />
        ))
      }
    </div>
    {
      projectData.data.project.tags.tagGroups.map((tg) => {
        const tags = projectData.data.project.tags.tags.filter(
          (t) => t.category === tg.category
        );

        return (
          <>
            {tags.length > 0 ? (
              <div class='w-full py-6 flex flex-col gap-6'>
                <h3 class='text-lg capitalize'>
                  {tg.category.replaceAll('_', '')}
                </h3>
                {annotationSets.map((set) => {
                  if (set.data.annotations.length > 0) {
                    const event = events.find(
                      (ev) => ev.id === set.data.event_id
                    );

                    if (event) {
                      return (
                        <AnnotationSpectrum
                          set={set}
                          tagGroup={tg}
                          label={event.data.label}
                        />
                      );
                    }
                  }
                })}
              </div>
            ) : null}
          </>
        );
      })
    }
  </Container>
</Layout>

<script>
  const bands = document.querySelectorAll('.annotation-band');

  for (let i = 0; i < bands.length; i++) {
    const band = bands[i] as HTMLDivElement;

    band.onmouseover = () => {
      const popup = band.querySelector(
        '.annotation-band-popup'
      ) as HTMLDivElement;

      const parent = band.parentElement! as HTMLElement;

      // get the position within the container (important if there's horizontally scrolling overflow)
      // subtract 2 from popup.clientWidth because it has a right border 2px wide
      const xPos =
        band.offsetLeft - parent.scrollLeft - (popup.clientWidth - 2) / 2;

      // get the vertical position while taking scrolling into account
      const yPos =
        band.getBoundingClientRect().top + window.scrollY - popup.clientHeight;

      // todo: calculate distance from bottom somehow
      //       this still gives weird results!
      console.log(yPos);

      popup.style.left = `${xPos}px`;
      popup.style.top = `${yPos}px`;

      console.log(popup.style);
    };
  }
</script>
