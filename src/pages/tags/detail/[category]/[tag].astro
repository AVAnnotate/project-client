---
import Breadcrumbs from '@components/Breadcrumbs.astro';
import Container from '@components/Container.astro';
import AnnotationNanostorePopulator from '@components/EventViewer/AnnotationUI/Annotations/AnnotationNanostorePopulator';
import Player from '@components/Player';
import AnnotationSpectrum from '@components/TagUtils/AnnotationSpectrum.astro';
import Layout from '@layouts/Layout.astro';
import type { DisplayedAnnotation } from '@ty/index';
import {
  compareAnnotations,
  fromTagParam,
  getTagDisplay,
  setHasTag,
  setsHasCategory,
  setsHasTag,
  toTagParam,
} from '@utils/tags';
import type { GetStaticPaths } from 'astro';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import { getEntry } from 'astro:content';
import { randomUUID } from 'crypto';
import { dynamicConfig } from 'dynamic-astro-config';
import { ArrowLeft } from 'react-bootstrap-icons';
import Annotations from '@components/EventViewer/AnnotationUI/Annotations/index.astro';

const projectData = await getEntry('project', 'project');

const baseUrl = import.meta.env.PROD
  ? projectData.data.publish.publish_pages_app
    ? projectData.data.project.slug
    : undefined
  : dynamicConfig.base;

export const getStaticPaths = (async () => {
  const projectData = await getEntry('project', 'project');

  return projectData.data.project.tags.tags.map((t) => ({
    params: {
      category: toTagParam(t.category),
      tag: toTagParam(t.tag),
    },
  }));
}) satisfies GetStaticPaths;

const { category, tag } = Astro.params;
const capitalizedCategory = getTagDisplay(fromTagParam(category));
const capitalizedTag = getTagDisplay(fromTagParam(tag));

const crumbs = [
  {
    label: 'Home',
    link: `${baseUrl ? `/${baseUrl}` : '/'}`,
  },
  {
    label: 'Index',
    link: `${baseUrl ? `/${baseUrl}` : ''}/tags`,
  },
  {
    label: 'Tag Groups',
    link: `${baseUrl ? `/${baseUrl}` : ''}/tags/detail`,
  },
  {
    label: capitalizedCategory,
    link: `${baseUrl ? `/${baseUrl}` : ''}/tags/detail/${category}`,
  },
  {
    label: capitalizedTag,
  },
];

const title = `Annotations for ${capitalizedCategory}: ${capitalizedTag}`;

const annotationSets = await getCollection('annotations');
const events = await getCollection('events');
annotationSets.sort((a, b) => compareAnnotations(a, b, events));
const categoryData = projectData.data.project.tags.tagGroups.find(
  (tg) =>
    tg.category.replaceAll('_', '').toLocaleLowerCase() ===
    fromTagParam(category).replaceAll('_', '').toLocaleLowerCase()
);

if (!categoryData) {
  return Astro.redirect(`/${baseUrl}`);
}

type SetData = {
  set: CollectionEntry<'annotations'>;
  event: CollectionEntry<'events'>;
  spectrumId: string;
};

const setData: SetData[] = [];

for (const set of annotationSets) {
  if (set.data.annotations.length === 0) {
    continue;
  }

  const event = events.find((ev) => ev.id === set.data.event_id);

  if (event) {
    setData.push({
      set,
      event,
      spectrumId: randomUUID(),
    });
  }
}
---

<Layout
  title={`${projectData.data.project.title} - ${title}`}
  class='bg-gray-100'
>
  <Breadcrumbs crumbs={crumbs} />
  <Container className='py-12 flex flex-col gap-8 font-inter'>
    <div class='flex items-center gap-4'>
      <a
        href={`${baseUrl ? '/' : ''}${baseUrl ? `${baseUrl}/` : '/'}tags/detail/${toTagParam(category)}`}
      >
        <ArrowLeft className='w-8 h-8' />
      </a>
      <h1 class='text-2xl'>{title}</h1>
    </div>
    {
      setsHasTag(setData, category, tag) && (
        <div class='w-full py-6 flex flex-col gap-6 divide-y divide-gray-300'>
          {setData.map((sd) => {
            if (setHasTag(sd.set.data.annotations, category, tag)) {
              return (
                <AnnotationSpectrum
                  event={sd.event}
                  set={sd.set}
                  category={categoryData}
                  tag={tag}
                  spectrumId={sd.spectrumId}
                />
              );
            }
          })}
          {setData.map((sd) => {
            if (setHasTag(sd.set.data.annotations, category, tag)) {
              return (
                <div
                  class='set-player eventContainer mediaContainer py-4'
                  data-player-id={sd.spectrumId}
                  style={{ display: 'none' }}
                >
                  <AnnotationNanostorePopulator
                    annotations={
                      sd.set.data.annotations
                        .map((ann) => ({
                          ...ann,
                          set: sd.set.id,
                          setName: sd.set.data.set,
                          file: sd.set.data.source_id,
                        }))
                        .sort(
                          (a: any, b: any) => a.start_time - b.start_time
                        ) as DisplayedAnnotation[]
                    }
                    client:load
                    playerId={sd.spectrumId}
                    file={sd.set.data.source_id}
                  />
                  <h3 class='text-lg py-4'>
                    {
                      sd.event.data.audiovisual_files[sd.set.data.source_id]
                        .label
                    }
                  </h3>
                  <Player
                    id={sd.spectrumId}
                    event={sd.event}
                    file={sd.set.data.source_id}
                    client:load
                  />
                  <Annotations
                    playerId={sd.spectrumId}
                    annotationSets={[sd.set]}
                    type={sd.event.data.item_type}
                    file={sd.set.data.source_id}
                    initialTag={{
                      category: fromTagParam(category),
                      tag: fromTagParam(tag),
                    }}
                  />
                </div>
              );
            }
          })}
        </div>
      )
    }
  </Container>

  <script>
    const spectrums = document.querySelectorAll(
      '[data-spectrum-id]'
    ) as NodeListOf<HTMLDivElement>;
    const spectrumButtons = document.querySelectorAll(
      '[data-spectrum-button-id]'
    ) as NodeListOf<HTMLButtonElement>;
    const setPlayers = document.querySelectorAll(
      '.set-player[data-player-id]'
    ) as NodeListOf<HTMLDivElement>;

    const updateSpectrum = (newSpectrum: string) => {
      for (const spectrum of spectrums) {
        const spectrumId = spectrum.getAttribute('data-spectrum-id');

        if (spectrumId === newSpectrum) {
          spectrum.style.backgroundColor = '#D9E6ED';
        } else {
          spectrum.style.backgroundColor = 'initial';
        }
      }

      for (const setPlayer of setPlayers) {
        const spectrumId = setPlayer.getAttribute('data-player-id');

        if (spectrumId === newSpectrum) {
          setPlayer.style.display = 'initial';
        } else {
          setPlayer.style.display = 'none';
        }
      }
    };

    // set up onclick handlers
    for (const spectrumButton of spectrumButtons) {
      spectrumButton.onclick = () => {
        const spectrumId = spectrumButton.getAttribute(
          'data-spectrum-button-id'
        );

        if (spectrumId) {
          updateSpectrum(spectrumId);
        }
      };
    }
  </script>
</Layout>
