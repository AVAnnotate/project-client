---
import type { GetStaticPaths } from 'astro';
import { dynamicConfig } from 'dynamic-astro-config';
import Layout from '@layouts/Layout.astro';
import Container from '@components/Container.astro';
import Player from '@components/Player';
import projectData from '@data/project.json';
import { getCollection } from 'astro:content';
import { getEntry } from 'astro:content';
import RichText from '../../components/RichText/index.astro'

const baseUrl = import.meta.env.PROD
  ? projectData.project.slug
  : dynamicConfig.base;

export const getStaticPaths = (async () => {
  const pages = await getCollection('pages');
  const eventPages = pages.filter(
    (p) => p.id !== 'order' && !p.data.autogenerate.enabled
  );

  return eventPages.map((page) => ({
    params: { pageUuid: page.id },
  }));
}) satisfies GetStaticPaths;

const { pageUuid } = Astro.params;

if (!pageUuid) {
  return Astro.redirect(`/${baseUrl}`);
}

const page = await getEntry('pages', pageUuid);

const event = await getEntry('events', page.data.autogenerate.type_id);

if (!event) {
  return Astro.redirect(`/${baseUrl}`);
}

const annotationData = await getCollection('annotations');
const annotations = annotationData.filter(
  (ad) => ad.data.event_id === event.id
);
---

<Layout title={page.data.title}>
  <Container className='py-16'>
    <div>
      <h1>{event.label}</h1>
      <RichText nodes={page.data.content} />
      {
        Object.keys(event.data.audiovisual_files).map((file: string) => {
          const url: string = event.data.audiovisual_files[file].file_url;
          return (
            <div class='flex flex-col gap-4'>
              <Player url={url} client:only='react' />
              {annotations.length > 0 ? (
                <div class='border border-collapse border-black'>
                  {annotations
                    .find((ann: any) => ann.data.source_id == file)
                    ?.data.annotations.map((ann: any) => (
                      <div class='flex flex-row justify-between p-4 border-t border-b border-t-black border-b-black'>
                        <p>{`${ann.start_time}-${ann.end_time}`}</p>
                        <div class='flex flex-col gap-2'>
                          {ann.tags?.map((tag: any) => (
                            <p>{`${tag.category}: ${tag.tag}`}</p>
                          ))}
                        </div>
                      </div>
                    ))}
                </div>
              ) : null}
            </div>
          );
        })
      }
    </div>
  </Container>
</Layout>
