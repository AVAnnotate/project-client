---
import type { GetStaticPaths } from "astro";
import projectData from '@data/project.json';

export const getStaticPaths = (() => {
    const eventPages = Object.keys(projectData.pages).filter((page) => (projectData.pages[page as keyof typeof projectData.pages].autogenerate.enabled && projectData.pages[page as keyof typeof projectData.pages].autogenerate.type == 'event'));
    return eventPages.map((page) => ( 
        {
            params: { event_id: page }
        }
    ));
}) satisfies GetStaticPaths;

const { event_id } = Astro.params;

if (!event_id) {
    return Astro.redirect('/');
}

const pages = import.meta.glob('@data/pages/*.json');
const eventImport = import.meta.glob('@data/events/*.json');
const thisPageKey = Object.keys(pages).find((page) => (page.includes(event_id)));
if (!thisPageKey) {
    return Astro.redirect('/')
}
const thisPage: any = await pages[thisPageKey]();

const events = thisPage.default.autogenerate.type_id;

if (!events) {
    console.log('No events listed')
    return Astro.redirect('/')
}

const thisEventKeys = typeof events == 'string' ? [Object.keys(eventImport).find((event) => (event.includes(events)))] : Object.keys(eventImport).filter((event) => events.findIndex((e: string) => event.includes(e)) > -1);
console.log(thisEventKeys, events, eventImport);


---