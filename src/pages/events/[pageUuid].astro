---
import type { GetStaticPaths } from 'astro';
import { dynamicConfig } from 'dynamic-astro-config';
import Layout from '@layouts/Layout.astro';
import Container from '@components/Container.astro';
import { getEntry } from 'astro:content';
import EventDisplay from '@components/EventDisplay.astro';
import { getPage, getPages } from 'src/utils/pages';

const projectData = await getEntry('project', 'project');

const baseUrl = import.meta.env.PROD
  ? projectData.data.project.slug
  : dynamicConfig.base;

export const getStaticPaths = (async () => {
  // filter out custom pages
  const pages = await getPages((page) => page.data.autogenerate.enabled);

  return pages.map((page) => ({
    params: { pageUuid: page.id },
  }));
}) satisfies GetStaticPaths;

const { pageUuid } = Astro.params;

if (!pageUuid) {
  return Astro.redirect(`/${baseUrl}`);
}

const page = await getPage(pageUuid);

if (!page.data.autogenerate.type_id) {
  return Astro.redirect(`/${baseUrl}`);
}
---

<Layout title={page.data.title}>
  <Container className='py-16'>
    <EventDisplay eventUuid={page.data.autogenerate.type_id} />
    <!-- {
      associatedEvents.map((event: any) => {
        return (
          <div class='flex flex-col gap-6'>
            <h1>{event.data.label}</h1>
            <RichText nodes={event.data.description} />
            {Object.keys(event.data.audiovisual_files).map((file: string) => {
              const url: string = event.data.audiovisual_files[file].file_url;
              const annotationsToShow = annotations
                .find((ann) => ann.data.source_id == file)
                ?.data.annotations.sort(
                  (a: any, b: any) => a.start_time - b.start_time
                );
              return (
                <PlayerWithAnnotations
                  file={file}
                  annotations={annotationsToShow}
                  url={url}
                  sticky
                />
              );
            })}
            <p>{event.data.citation}</p>
          </div>
        );
      })
    } -->
  </Container>
</Layout>
