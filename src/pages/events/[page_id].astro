---
import type { GetStaticPaths } from 'astro';
import { dynamicConfig } from 'dynamic-astro-config';
import Layout from '@layouts/Layout.astro';
import Container from '@components/Container.astro';
import Player from '@components/Player';
import pageOrder from '@data/pages/order.json';
import RichText from '@components/RichText/index.astro';
import projectData from '@data/project.json';

export const getStaticPaths = (() => {
  return pageOrder.map((page) => ({
    params: { page_id: page },
  }));
}) satisfies GetStaticPaths;

const { page_id } = Astro.params;

const baseUrl = import.meta.env.PROD
  ? projectData.project.slug
  : dynamicConfig.base;

if (!page_id) {
  return Astro.redirect(`/${baseUrl}`);
}

const pages = import.meta.glob('@data/pages/*.json');
const eventImport = import.meta.glob('@data/events/*.json');
const thisPageKey = Object.keys(pages).find((page) => page.includes(page_id));
if (!thisPageKey) {
  return Astro.redirect(`/${baseUrl}`);
}
const thisPage: any = await pages[thisPageKey]();

const events = thisPage.default.autogenerate.type_id;

if (!events) {
  console.log('No events listed');
  return Astro.redirect(`/${baseUrl}`);
}

//right now I'm setting this up to handle either a string of a single event or an array of event IDs
const thisEventKeys =
  typeof events == 'string'
    ? [Object.keys(eventImport).find((event) => event.includes(events))]
    : Object.keys(eventImport).filter(
        (event) => events.findIndex((e: string) => event.includes(e)) > -1
      );

if (!thisEventKeys || !thisEventKeys.length) {
  return Astro.redirect(`/${baseUrl}`);
}
//get event info
let allEvents: any = {};

for (let i = 0; i < thisEventKeys.length; i++) {
  const current = thisEventKeys[i];
  if (current) {
    const currentDetail: any = await eventImport[current]();
    allEvents[current] = currentDetail?.default;
  }
}

//get annotation info
let pageAnnotations: any[] = [];
//check whether there actually are any annotation files
const annotationFiles = import.meta.glob('@data/annotations/*.json');
if (Object.keys(annotationFiles).length) {
  const annotationsResponse = await Astro.glob('@data/annotations/*.json');

  pageAnnotations = annotationsResponse
    .filter((ann) => events.includes(ann.default.event_id))
    .map((ann) => ann.default);
}
---

<Layout title={thisPage.default.title}>
  <Container className='py-16'>
    {
      Object.values(allEvents).map((event: any) => {
        return (
          <div>
            <h1>{event.label}</h1>
            {Object.keys(event.audiovisual_files).map(
              (file: string, idx: number) => {
                const url: string = event.audiovisual_files[file].file_url;
                const playerId: string = `player${idx.toString()}`;
                return (
                  <div
                    class='mediaContainer flex flex-col gap-4'
                    data-player-id={playerId}
                    data-player-url={url}
                  >
                    <Player url={url} id={playerId} client:only='react' />
                    <div
                      class='border border-collapse border-black relative overflow-y-scroll max-h-[80dvh]'
                      id={playerId}
                    >
                      {pageAnnotations
                        .find((ann) => ann.source_id == file)
                        ?.annotations.sort(
                          (a: any, b: any) => a.start_time - b.start_time
                        )
                        .map((ann: any) => {
                          return (
                            <div
                              class='annotationNode flex flex-row justify-between gap-4 p-4 border-t border-b border-t-black border-b-black'
                              data-start={ann.start_time}
                              data-end={ann.end_time}
                            >
                              <div class='flex flex-col gap-2'>
                                <p class='w-[10%]'>
                                  {`${ann.start_time}-${ann.end_time}`}
                                </p>
                                <button
                                  class='playAnnotation'
                                  data-start={ann.start_time}
                                  data-end={ann.end_time}
                                  data-player-id={playerId}
                                >
                                  Play
                                </button>
                              </div>
                              <div class='w-[65%]'>
                                <RichText nodes={ann.annotation} />
                              </div>
                              <div class='flex flex-col gap-2 w-1/4'>
                                {ann.tags?.map((tag: any) => (
                                  <p>{`${tag.category}: ${tag.tag}`}</p>
                                ))}
                              </div>
                            </div>
                          );
                        })}
                    </div>
                  </div>
                );
              }
            )}
          </div>
        );
      })
    }
  </Container>
</Layout>

<script>
  import { $pagePlayersState } from 'src/store.ts';
  //initially, reset the loaded players to none
  $pagePlayersState.set({});
  const players = document.getElementsByClassName('mediaContainer');
  for (let i = 0; i < players.length; i++) {
    const thisNode = players[i];
    if (thisNode instanceof HTMLElement && thisNode.dataset.playerId) {
      $pagePlayersState.setKey(thisNode.dataset.playerId, {
        id: thisNode.dataset.playerUrl || '',
        position: 0,
        seekTo: 0,
        isPlaying: false,
        autoScroll: true,
        hideTags: false,
        currentAnnotation: 0,
        searchQuery: '',
        activeFilters: [],
        annotationStarts: [],
      });
    }
  }
  const annotationPlayNodes = document.getElementsByClassName('playAnnotation');
  const annotationNodes = document.getElementsByClassName('annotationNode');
  for (let i = 0; i < annotationPlayNodes.length; i++) {
    const thisNode = annotationPlayNodes[i];
    if (
      thisNode instanceof HTMLElement &&
      thisNode.dataset.start &&
      thisNode.dataset.playerId
    ) {
      const annotationStartsNew =
        $pagePlayersState.get()[thisNode.dataset.playerId].annotationStarts;
      if (annotationStartsNew) {
        annotationStartsNew.push({
          start: Math.floor(Number(thisNode.dataset.start)),
          end: Math.floor(Number(thisNode.dataset.end)),
        });
        $pagePlayersState.setKey(thisNode.dataset.playerId, {
          ...$pagePlayersState.get()[thisNode.dataset.playerId],
          annotationStarts: annotationStartsNew,
        });
      }
      thisNode.addEventListener('click', () => {
        const playerId = thisNode.dataset.playerId || 'null';
        $pagePlayersState.setKey(playerId, {
          ...$pagePlayersState.get()[playerId],
          position: Number(thisNode.dataset.start),
          seekTo: Number(thisNode.dataset.start),
          isPlaying: true,
        });
      });
    }
  }

  $pagePlayersState.listen((state, oldState, changed) => {
    if (
      changed &&
      Math.floor(state[changed].position * 1000) % 7 == 0 && //this is just meant to get it firing at a reasonable interval
      state[changed].autoScroll
    ) {
      const startTimes = state[changed].annotationStarts;
      const current = startTimes?.findIndex(
        (time) =>
          time.start <= state[changed].position &&
          time.end > state[changed].position
      );
      if (typeof current == 'number' && current >= 0) {
        const activeNode = annotationNodes[current];
        activeNode.scrollIntoView({ block: 'center', behavior: 'smooth' });
        activeNode.classList.add('bg-red-50');
        for (let i = 0; i < annotationNodes.length; i++) {
          if (i != current) {
            annotationNodes[i].classList.remove('bg-red-50');
          }
        }
      }
    }
  });
</script>
