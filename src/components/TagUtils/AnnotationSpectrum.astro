---
import type { Annotation, TagGroup } from '@ty/index.ts';
import type { CollectionEntry } from 'astro:content';
import AnnotationBand from './AnnotationBand.astro';
import { getCollection } from 'astro:content';
import { PlayCircleIcon } from '@heroicons/react/24/outline';

interface Props {
  category: TagGroup;
  event: CollectionEntry<'events'>;
  set: CollectionEntry<'annotations'>;
  // for tracking the spectrum in clientside JS on the single tag page
  spectrumId?: string;
  // label: string;
  tagColors?: {
    [tag: string]: string;
  };
  // restrict to only this tag, if provided
  tag?: string;
}

const { category, event, set, spectrumId, tagColors, tag } = Astro.props;

const allSets = await getCollection(
  'annotations',
  (annSet) => annSet.data.event_id === event.id
);

// display the event name as the label by default,
// then expand the label as necessary below
let label = event.data.label;

// add the AV file name if there's more than one AV file
if (Object.keys(event.data.audiovisual_files).length > 1) {
  label = `${label} - ${event.data.audiovisual_files[set.data.source_id].label}`;
}

// add the set name if there's more than one set for this file
if (allSets.filter((s) => s.data.source_id === set.data.source_id).length > 1) {
  label = `${label} - ${set.data.set}`;
}
---

<div class='flex flex-col gap-4 pt-4' data-spectrum-id={spectrumId}>
  <div class='flex gap-4 items-center'>
    {
      spectrumId && (
        <button data-spectrum-button-id={spectrumId} type='button'>
          <PlayCircleIcon className='w-6 h-6' />
        </button>
      )
    }
    <p>{label}</p>
  </div>
  <div class='flex flex-row w-full h-[42px] overflow-x-auto'>
    {
      set.data.annotations
        .sort((a: Annotation, b: Annotation) => a.start_time - b.start_time)
        .map((ann) => {
          const matchingTags = ann.tags.filter(
            (t) =>
              t.category.toLocaleLowerCase() ===
              category.category.toLocaleLowerCase()
          );

          const foundTags = tag
            ? ann.tags.filter(
                (t) =>
                  t.tag.toLocaleLowerCase() === tag.toLocaleLowerCase() &&
                  t.category.toLocaleLowerCase() ===
                    category.category.toLocaleLowerCase()
              )
            : [];

          const tagColor =
            tagColors && matchingTags.length > 0
              ? tagColors[matchingTags[0].tag]
              : undefined;

          if (
            (matchingTags.length === 0 && !tag) ||
            (tag && foundTags.length === 0)
          ) {
            return <div />;
          }

          console.log(
            'tag: ',
            tag,
            '\n',
            'category: ',
            category,
            '\n',
            'matchingTags: ',
            matchingTags,
            '\nfoundTags: ',
            foundTags
          );
          return (
            <AnnotationBand
              annotation={ann}
              category={category}
              color={tagColor}
              tag={tag}
            />
          );
        })
    }
  </div>
</div>

<script>
  const bands = document.querySelectorAll('.annotation-band');

  for (let i = 0; i < bands.length; i++) {
    const band = bands[i] as HTMLDivElement;

    band.onmouseover = () => {
      const popup = band.querySelector(
        '.annotation-band-popup'
      ) as HTMLDivElement;
      const popupArrow = band.querySelector(
        '.annotation-band-popup-arrow'
      ) as HTMLDivElement;

      if (!popup) {
        return null;
      }

      const parent = band.parentElement! as HTMLElement;

      // get the position within the container (important if there's horizontally scrolling overflow)
      // subtract 2 from popup.clientWidth because it has a right border 2px wide
      let xPos =
        band.offsetLeft -
        parent.scrollLeft -
        popup.clientWidth / 2 +
        (band.clientWidth - 2) / 2;

      // get the vertical position while taking scrolling into account
      const yPos =
        band.getBoundingClientRect().top +
        window.scrollY -
        popup.clientHeight -
        // 8px leaves a margin for the bottom arrow
        8;

      const arrowXpos =
        band.offsetLeft +
        band.clientWidth / 2 -
        popupArrow.offsetWidth / 2 -
        parent.scrollLeft;
      const arrowYpos = yPos + popup.clientHeight;

      popupArrow.style.left = `${arrowXpos}px`;
      popupArrow.style.top = `${arrowYpos}px`;

      //  snap to left edge (with a 10px margin) if the popup would have ended up outside the left side of the page
      if (xPos < 10) {
        xPos = 10;
      }

      // snap to right edge (with a 10px margin) if the popup would have ended up outside the right bounds of the page
      if (xPos + popup.clientWidth > document.body.clientWidth - 10) {
        xPos = document.body.clientWidth - popup.clientWidth - 10;
      }

      popup.style.left = `${xPos}px`;
      popup.style.top = `${yPos}px`;
    };
  }
</script>
