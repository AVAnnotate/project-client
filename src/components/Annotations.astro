---
import RichText from '@components/RichText/index.astro';

export interface Props {
  playerId: string;
  annotations: any[];
}

const { playerId, annotations } = Astro.props;
---

<div
  class='border border-collapse border-black relative overflow-y-scroll max-h-[80dvh]'
  id={playerId}
>
  {
    annotations.map((ann: any) => {
      return (
        <div
          class='annotationNode flex flex-row justify-between gap-4 p-4 border-t border-b border-t-black border-b-black'
          data-start={ann.start_time}
          data-end={ann.end_time}
        >
          <div class='flex flex-col gap-2'>
            <p class='w-[10%]'>{`${ann.start_time}-${ann.end_time}`}</p>
            <button
              class='playAnnotation'
              data-start={ann.start_time}
              data-end={ann.end_time}
              data-player-id={playerId}
            >
              Play
            </button>
          </div>
          <div class='w-[65%]'>
            <RichText nodes={ann.annotation} />
          </div>
          <div class='flex flex-col gap-2 w-1/4'>
            {ann.tags?.map((tag: any) => (
              <p>{`${tag.category}: ${tag.tag}`}</p>
            ))}
          </div>
        </div>
      );
    })
  }
</div>

<script>
  import { $pagePlayersState } from 'src/store.ts';
  const annotationPlayNodes = document.getElementsByClassName('playAnnotation');
  const annotationNodes = document.getElementsByClassName('annotationNode');
  for (let i = 0; i < annotationPlayNodes.length; i++) {
    const thisNode = annotationPlayNodes[i];
    if (
      thisNode instanceof HTMLElement &&
      thisNode.dataset.start &&
      thisNode.dataset.playerId
    ) {
      const annotationStartsNew =
        $pagePlayersState.get()[thisNode.dataset.playerId].annotationStarts;
      if (annotationStartsNew) {
        annotationStartsNew.push({
          start: Math.floor(Number(thisNode.dataset.start)),
          end: Math.floor(Number(thisNode.dataset.end)),
        });
        $pagePlayersState.setKey(thisNode.dataset.playerId, {
          ...$pagePlayersState.get()[thisNode.dataset.playerId],
          annotationStarts: annotationStartsNew,
        });
      }
      thisNode.addEventListener('click', () => {
        const playerId = thisNode.dataset.playerId || 'null';
        $pagePlayersState.setKey(playerId, {
          ...$pagePlayersState.get()[playerId],
          position: Number(thisNode.dataset.start),
          seekTo: Number(thisNode.dataset.start),
          isPlaying: true,
        });
      });
    }
  }

  $pagePlayersState.listen((state, oldState, changed) => {
    if (
      changed &&
      Math.floor(state[changed].position * 1000) % 7 == 0 && //this is just meant to get it firing at a reasonable interval
      state[changed].autoScroll
    ) {
      const startTimes = state[changed].annotationStarts;
      const current = startTimes?.findIndex(
        (time) =>
          time.start <= state[changed].position &&
          time.end > state[changed].position
      );
      if (typeof current == 'number' && current >= 0) {
        const activeNode = annotationNodes[current];
        activeNode.scrollIntoView({ block: 'center', behavior: 'smooth' });
        activeNode.classList.add('bg-red-50');
        for (let i = 0; i < annotationNodes.length; i++) {
          if (i != current) {
            annotationNodes[i].classList.remove('bg-red-50');
          }
        }
      }
    }
  });
</script>
