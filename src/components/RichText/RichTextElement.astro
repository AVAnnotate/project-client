---
import EventComparison from '@components/EventViewer/EventComparison.astro';
import EventViewer from '@components/EventViewer/index.astro';
import TableOfContents from '@components/TableOfContents.astro';
import { randomUUID } from 'crypto';

const { attributes, element } = Astro.props;

const getImageClass = (size: 'thumbnail' | 'medium' | 'large' | 'full') => {
  switch (size) {
    case 'thumbnail':
      return 'max-w-40';
    case 'medium':
      return 'max-w-[400px]';
    case 'large':
      return 'max-w-[640px]';
    case 'full':
      return 'max-w-full';
  }
};
---

{
  (async () => {
    const style = { textAlign: element.align };
    const imgStyle = {
      margin:
        element.align == 'center'
          ? '0 auto'
          : element.align == 'right'
            ? '0 0 0 auto'
            : '0',
    };

    switch (element.type) {
      case 'line-break':
        return <br />;
      case 'block-quote':
        return (
          <blockquote style={style} {...attributes}>
            <slot />
          </blockquote>
        );
      case 'bulleted-list':
        return (
          <ul class='list-disc list-inside' style={style} {...attributes}>
            <slot />
          </ul>
        );
      case 'heading-one':
        return (
          <h1 style={style} {...attributes}>
            <slot />
          </h1>
        );
      case 'heading-two':
        return (
          <h2 style={style} {...attributes}>
            <slot />
          </h2>
        );
      case 'list-item':
        return (
          <li class='indent-4' style={style} {...attributes}>
            <slot />
          </li>
        );
      case 'numbered-list':
        return (
          <ol class='list-decimal list-inside' style={style} {...attributes}>
            <slot />
          </ol>
        );
      case 'image':
        return (
          <div {...attributes} style={style}>
            <img
              src={element.url}
              class={getImageClass(element.size)}
              style={imgStyle}
            />
            <slot />
          </div>
        );
      case 'table-of-contents':
        return (
          <div {...attributes} style={style}>
            <TableOfContents />
            <slot />
          </div>
        );
      case 'grid':
        return (
          <div
            style={{
              display: 'grid',
              gridTemplateColumns: `${element.layout[0]}fr ${element.layout[1]}fr`,
              gap: '1rem',
            }}
            {...attributes}
          >
            <slot />
          </div>
        );
      case 'column':
        return (
          <div className='slate-column' {...attributes}>
            <slot />
          </div>
        );
      case 'event':
        const playerId = randomUUID();

        return (
          <div
            class='bg-gray-100 px-4 pb-4 max-h-[700px] overflow-y-auto eventContainer'
            data-player-id={playerId}
          >
            <EventViewer
              end={element.end}
              start={element.start}
              includes={element.includes}
              uuid={element.uuid}
              isEmbed
              playerId={playerId}
              file={element.file}
            />
          </div>
        );
      case 'event-comparison':
        return (
          <EventComparison
            event1={element.event1}
            event2={element.event2}
            includes={element.includes}
          />
        );
      default:
        return (
          <p class='min-h-6 leading-6' style={style} {...attributes}>
            <slot />
          </p>
        );
    }
  })()
}
