---
import type { SlateEventNodeProps } from '@ty/slate';
import type { CollectionEntry } from 'astro:content';
import RichText from '@components/RichText/index.astro';
import Player from '@components/Player';
import Annotations from './AnnotationUI/Annotations/index.astro';
import AnnotationHeader from './AnnotationUI/AnnotationHeader.astro';
import ConditionalContainer from './ConditionalContainer.astro';
import AudioFilePicker from './AudioFilePicker';

interface Props extends SlateEventNodeProps {
  annotationSets: CollectionEntry<'annotations'>[];
  event: CollectionEntry<'events'>;
  file: string;
  isEmbed?: boolean;
  playerId: string;
  isComparison?: boolean;
}

const {
  // include everything by default
  includes,
  start,
  end,
  event,
  file,
  annotationSets,
  isEmbed,
  isComparison,
  playerId,
} = Astro.props;
---

<div>
  <div class={`sticky top-0 z-10 ${!isEmbed ? 'shadow' : ''}`}>
    <div class='flex flex-col gap-6 bg-gray-100 py-6 [&_p]:mb-0!'>
      <ConditionalContainer condition={!isEmbed}>
        {includes.includes('label') && <h1>{event.data.label}</h1>}
        {
          includes.includes('description') && event.data.description && (
            <RichText nodes={event.data.description} />
          )
        }
      </ConditionalContainer>
      <div class='mediaContainer gap-4 flex flex-col' data-player-id={playerId}>
        {
          includes.includes('media') && (
            <ConditionalContainer condition={!isEmbed}>
              {/* only show the picker if
                  1. there's more than AV file
                  2. this is not an embed of a single AV file */}
              {!start &&
                !end &&
                Object.keys(event.data.audiovisual_files).length > 1 && (
                  <AudioFilePicker
                    event={event}
                    playerId={playerId}
                    client:only='react'
                  />
                )}
              <Player
                id={playerId}
                client:only='react'
                event={event}
                start={start}
                end={end}
              />
            </ConditionalContainer>
          )
        }
      </div>
      <ConditionalContainer condition={!isEmbed}>
        <AnnotationHeader
          playerId={playerId}
          annotationSets={annotationSets}
          isComparison={isComparison}
          type={event.data.item_type}
        />
      </ConditionalContainer>
    </div>
  </div>
  <ConditionalContainer condition={!isEmbed}>
    <Annotations
      annotationSets={annotationSets}
      isEmbed={isEmbed}
      playerId={playerId}
      type={event.data.item_type}
      initialFile={file}
    />
  </ConditionalContainer>
</div>
