---
import { type CollectionEntry } from 'astro:content';
import Annotation from './Annotation.astro';
import type { DisplayedAnnotation, Tag } from '@ty/index';
import AnnotationNanostorePopulator from './AnnotationNanostorePopulator';

export interface Props {
  playerId: string;
  annotationSets: CollectionEntry<'annotations'>[];
  type: 'Audio' | 'Video';
  initialFile: string;
  initialTag?: Tag;
}

const { annotationSets, initialFile, initialTag, playerId, type } = Astro.props;

let sortedAnnotations = annotationSets
  .map((set) =>
    set.data.annotations.map((ann) => ({
      ...ann,
      set: set.id,
      setName: set.data.set,
      file: set.data.source_id,
    }))
  )
  .flat()
  .sort(
    (a: any, b: any) => a.start_time - b.start_time
  ) as DisplayedAnnotation[];

if (initialTag) {
  sortedAnnotations = sortedAnnotations.filter((ann) => {
    return !!ann.tags.find(
      (t) =>
        t.tag.toLocaleLowerCase() === initialTag.tag.toLocaleLowerCase() &&
        t.category.toLocaleLowerCase() ===
          initialTag.category.toLocaleLowerCase()
    );
  });
}
---

<div
  class=`top-[300px] overflow-y-visible w-full ${type === 'Audio' ? 'sticky' : ''}`
>
  <AnnotationNanostorePopulator
    annotations={sortedAnnotations}
    playerId={playerId}
    initialFile={initialFile}
    client:load
  />
  <div
    class={`${type === 'Video' ? 'overflow-y-scroll max-h-[510px] video videoAnnotationContainer' : ''}`}
    id={playerId}
    data-player-id={playerId}
  >
    {
      sortedAnnotations.map((ann) => {
        return (
          <Annotation
            ann={ann}
            initialFile={initialFile}
            playerId={playerId}
            setName={annotationSets.length > 1 ? ann.setName : undefined}
          />
        );
      })
    }
  </div>
</div>

<script>
  import { defaultState } from '@utils/player.ts';
  import { $pagePlayersState } from 'src/store.ts';

  const hideNode = (node: HTMLElement | Element) => {
    node.classList.add('hidden');
    node.classList.remove('flex');
  };

  const showNode = (node: HTMLElement | Element) => {
    node.classList.add('flex');
    node.classList.remove('hidden');
  };

  const activeBackground = '!bg-blue-hover';

  const annotationPlayNodes = document.querySelectorAll(`.playAnnotation`);

  for (let i = 0; i < annotationPlayNodes.length; i++) {
    const thisNode = annotationPlayNodes[i] as HTMLElement;

    if (thisNode.dataset.start && thisNode.dataset.playerId) {
      const annotationStartsNew =
        $pagePlayersState.get()[thisNode.dataset.playerId]?.annotationStarts;

      if (annotationStartsNew) {
        annotationStartsNew.push({
          start: Math.floor(Number(thisNode.dataset.start)),
          end:
            Math.floor(Number(thisNode.dataset.end)) >
            Math.floor(Number(thisNode.dataset.start))
              ? Math.floor(Number(thisNode.dataset.end))
              : undefined,
          playerId: thisNode.dataset.playerId,
        });
        $pagePlayersState.setKey(thisNode.dataset.playerId, {
          ...($pagePlayersState.get()[thisNode.dataset.playerId] ||
            defaultState),
          annotationStarts: annotationStartsNew,
        });
      }
      thisNode.addEventListener('click', () => {
        const playerId = thisNode.dataset.playerId || 'null';
        $pagePlayersState.setKey(playerId, {
          ...($pagePlayersState.get()[playerId] || defaultState),
          position: Number(thisNode.dataset.start),
          seekTo: Number(thisNode.dataset.start),
          isPlaying: true,
        });
      });
    }
  }

  $pagePlayersState.listen((state, oldState, changed) => {
    if (!changed) {
      return null;
    }

    const playerId = changed.split('.')[0];
    const playerState = state[playerId];

    const eventContainerEl = document.querySelector(
      `.eventContainer[data-player-id="${playerId}"]`
    );

    if (!eventContainerEl) {
      console.error(`No event container found for ${changed}`);
      return null;
    }

    const annotationNodes =
      eventContainerEl.querySelectorAll(`.annotationNode`);
    const annotationTagNodes =
      eventContainerEl.querySelectorAll(`.annotationTags`);

    const startTimes = playerState.annotationStarts?.filter(
      (s) => s.playerId === changed
    );
    const current = startTimes?.findIndex((time, idx) => {
      if (typeof time.end === 'number') {
        return (
          time.start <= playerState.position && time.end > playerState.position
        );
      }
      return idx < startTimes.length - 1
        ? time.start <= playerState.position &&
            startTimes[idx + 1].start > playerState.position
        : time.start <= playerState.position;
    });

    if (typeof current === 'number' && current >= 0) {
      const activeNode = annotationNodes[current] as HTMLElement;

      if (activeNode) {
        if (playerState.autoScroll) {
          // scroll the parent element if we're in an embed
          if (playerState.isEmbed) {
            const videoContainerEl = document.querySelector(
              `.videoAnnotationContainer[data-player-id="${changed}"]`
            );
            const offsetTop = activeNode.offsetTop;

            // we need to scroll a different container if we're in an embedded video event
            if (videoContainerEl) {
              videoContainerEl.scroll({
                top: offsetTop - videoContainerEl.clientHeight,
                behavior: 'smooth',
              });
            } else {
              eventContainerEl.scroll({
                top: offsetTop - eventContainerEl.clientHeight / 3,
                behavior: 'smooth',
              });
            }
            // otherwise, scroll the whole page
          } else {
            activeNode.scrollIntoView({ behavior: 'smooth', block: 'end' });
          }
        }
        activeNode.classList.add(activeBackground);
      }

      for (let i = 0; i < annotationNodes.length; i++) {
        if (i !== current) {
          annotationNodes[i].classList.remove(activeBackground);
        }
      }
    }

    // show or hide tags if necessary
    if (playerState.showTags !== oldState[playerId]?.showTags) {
      if (playerState.showTags) {
        for (let i = 0; i < annotationTagNodes.length; i++) {
          showNode(annotationTagNodes[i]);
        }
      } else {
        for (let i = 0; i < annotationTagNodes.length; i++) {
          hideNode(annotationTagNodes[i]);
        }
      }
    }

    // filter on sets, text, and tags
    for (const node of annotationNodes) {
      const uuid = node.getAttribute('data-uuid');

      if (uuid && playerState.filteredAnnotations.includes(uuid)) {
        showNode(node);
      } else {
        hideNode(node);
      }
    }
  });
</script>
