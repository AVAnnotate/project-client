---
import { type CollectionEntry } from 'astro:content';
import Annotation from './Annotation.astro';
import type { DisplayedAnnotation } from '@ty/index';
import AnnotationNanostorePopulator from './AnnotationNanostorePopulator';

export interface Props {
  playerId: string;
  annotationSets: CollectionEntry<'annotations'>[];
  type: 'Audio' | 'Video';
}

const { playerId, annotationSets, type } = Astro.props;

const sortedAnnotations = annotationSets
  .map((set) =>
    set.data.annotations.map((ann) => ({
      ...ann,
      set: set.id,
      setName: set.data.set,
    }))
  )
  .flat()
  .sort(
    (a: any, b: any) => a.start_time - b.start_time
  ) as DisplayedAnnotation[];
---

<div class={`flex flex-col`}>
  <div
    class=`top-[300px] overflow-y-visible w-full ${type === 'Audio' ? 'sticky' : ''}`
  >
    <AnnotationNanostorePopulator
      annotations={sortedAnnotations}
      playerId={playerId}
      client:only='react'
    />
    <div
      class={`${type === 'Video' ? 'overflow-y-scroll max-h-[calc(100dvh_-360px)]' : ''}`}
      id={playerId}
    >
      {
        sortedAnnotations.map((ann) => {
          return (
            <Annotation
              ann={ann}
              playerId={playerId}
              setName={annotationSets.length > 1 ? ann.setName : undefined}
            />
          );
        })
      }
    </div>
  </div>
</div>

<script>
  import { $pagePlayersState } from 'src/store.ts';

  const annotationPlayNodes = document.getElementsByClassName('playAnnotation');
  const annotationNodes = document.getElementsByClassName('annotationNode');
  const annotationTagNodes = document.getElementsByClassName('annotationTags');

  const activeBackground = '!bg-blue-hover';

  const hideNode = (node: HTMLElement | Element) => {
    node.classList.add('hidden');
    node.classList.remove('flex');
  };

  const showNode = (node: HTMLElement | Element) => {
    node.classList.add('flex');
    node.classList.remove('hidden');
  };

  for (let i = 0; i < annotationPlayNodes.length; i++) {
    const thisNode = annotationPlayNodes[i];
    if (
      thisNode instanceof HTMLElement &&
      thisNode.dataset.start &&
      thisNode.dataset.playerId
    ) {
      const annotationStartsNew =
        $pagePlayersState.get()[thisNode.dataset.playerId].annotationStarts;
      if (annotationStartsNew) {
        annotationStartsNew.push({
          start: Math.floor(Number(thisNode.dataset.start)),
          end:
            Math.floor(Number(thisNode.dataset.end)) >
            Math.floor(Number(thisNode.dataset.start))
              ? Math.floor(Number(thisNode.dataset.end))
              : undefined,
        });
        $pagePlayersState.setKey(thisNode.dataset.playerId, {
          ...$pagePlayersState.get()[thisNode.dataset.playerId],
          annotationStarts: annotationStartsNew,
        });
      }
      thisNode.addEventListener('click', () => {
        const playerId = thisNode.dataset.playerId || 'null';
        $pagePlayersState.setKey(playerId, {
          ...$pagePlayersState.get()[playerId],
          position: Number(thisNode.dataset.start),
          seekTo: Number(thisNode.dataset.start),
          isPlaying: true,
        });
      });
    }
  }

  $pagePlayersState.listen((state, oldState, changed) => {
    if (!changed) {
      return null;
    }

    const startTimes = state[changed].annotationStarts;
    const current = startTimes?.findIndex((time, idx) => {
      if (typeof time.end === 'number') {
        return (
          time.start <= state[changed].position &&
          time.end > state[changed].position
        );
      }
      return idx < startTimes.length - 1
        ? time.start <= state[changed].position &&
            startTimes[idx + 1].start > state[changed].position
        : time.start <= state[changed].position;
    });
    if (typeof current === 'number' && current >= 0) {
      const activeNode = annotationNodes[current];
      if (state[changed].autoScroll) {
        activeNode.scrollIntoView({ block: 'center', behavior: 'smooth' });
      }
      activeNode.classList.add(activeBackground);
      for (let i = 0; i < annotationNodes.length; i++) {
        if (i !== current) {
          annotationNodes[i].classList.remove(activeBackground);
        }
      }
    }

    //show or hide tags if necessary
    if (state[changed].showTags !== oldState[changed].showTags) {
      if (state[changed].showTags) {
        for (let i = 0; i < annotationTagNodes.length; i++) {
          showNode(annotationTagNodes[i]);
        }
      } else {
        for (let i = 0; i < annotationTagNodes.length; i++) {
          hideNode(annotationTagNodes[i]);
        }
      }
    }

    //filter on sets, text, and tags
    for (let i = 0; i < annotationNodes.length; i++) {
      const node = annotationNodes[i];

      const uuid = node.getAttribute('data-uuid');

      if (uuid && state[changed].filteredAnnotations.includes(uuid)) {
        showNode(annotationNodes[i]);
      } else {
        hideNode(annotationNodes[i]);
      }
    }
  });
</script>
