---
import type { Includes } from '@ty/slate';
import type { CollectionEntry } from 'astro:content';
import RichText from '../RichText/index.astro';
import Player from '@components/Player';
import Annotations from './AnnotationUI/Annotations/index.astro';
import AnnotationHeader from './AnnotationUI/AnnotationHeader.astro';
import ConditionalContainer from './ConditionalContainer.astro';
import VideoFilePicker from './VideoFilePicker';
import { getCaptionSets } from 'src/utils/events';

export interface Props {
  event: CollectionEntry<'events'>;
  annotationSets: CollectionEntry<'annotations'>[];
  sticky?: boolean;
  end?: number;
  start?: number;
  includes: Includes[];
  file: string;
  isEmbed?: boolean;
  playerId: string;
}

const {
  annotationSets,
  event,
  // include everything by default
  includes,
  start,
  end,
  sticky,
  file,
  playerId,
  isEmbed,
} = Astro.props;

const captionSets = await getCaptionSets(event, file, annotationSets);
---

<ConditionalContainer
  condition={!isEmbed}
  className='flex flex-col gap-6 bg-gray-100 py-6'
>
  {
    (includes.includes('annotations') || includes.includes('media')) && (
      <div
        class={`mediaContainer gap-4 ${sticky ? 'sticky top-0' : ''} ${event.data.item_type === 'Audio' ? 'flex flex-col' : 'grid grid-cols-[2fr,1fr] lg:gap-x-4'}`}
        data-player-id={playerId}
      >
        {includes.includes('media') && (
          <div>
            {includes.includes('label') && (
              <h1 class='py-4'>{event.data.label}</h1>
            )}
            <Player
              id={playerId}
              client:load
              event={event}
              start={start}
              end={end}
              vttURLs={captionSets}
              initialFile={file}
            />
            <div class='textContent'>
              {!start &&
              !end &&
              Object.keys(event.data.audiovisual_files).length > 1 ? (
                <VideoFilePicker event={event} playerId={playerId} client:load>
                  {includes.includes('description') &&
                    event.data.description && (
                      <RichText nodes={event.data.description} />
                    )}
                </VideoFilePicker>
              ) : (
                <>
                  {includes.includes('description') &&
                    event.data.description && (
                      <RichText nodes={event.data.description} />
                    )}
                </>
              )}
            </div>
          </div>
        )}
        {includes.includes('annotations') && (
          <div class='py-4'>
            <AnnotationHeader
              playerId={playerId}
              annotationSets={annotationSets}
              type={event.data.item_type}
            />
            <Annotations
              playerId={playerId}
              annotationSets={annotationSets}
              initialFile={file}
              type={event.data.item_type}
            />
          </div>
        )}
      </div>
    )
  }
</ConditionalContainer>
<ConditionalContainer condition={!!event.data.citation}>
  <p class='py-3 mb-3'>{event.data.citation}</p>
</ConditionalContainer>
