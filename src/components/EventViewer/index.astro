---
import { getCollection } from 'astro:content';
import type { Includes, SlateEventNodeProps } from '@ty/slate';
import AudioEvent from './AudioEvent.astro';
import VideoEvent from './VideoEvent.astro';
import { getEntry } from 'astro:content';
import PlayerStateNanostorePopulator from './PlayerStateNanostorePopulator';

export interface Props extends Omit<SlateEventNodeProps, 'uuid' | 'includes'> {
  end?: number;
  start?: number;
  sticky?: boolean;
  uuid: string;
  isEmbed?: boolean;
  playerId: string;
  file?: string;
  includes?: Includes[];
  isComparison?: boolean;
}

const { isEmbed, file, uuid, playerId } = Astro.props;

const event = await getEntry('events', uuid);

if (!event) {
  return null;
}

const annotationData = await getCollection('annotations');

const annotationSets = annotationData.filter(
  (an) => an.data.event_id === event.id
);

// allow a default file to be configured via props
// otherwise, use the first file in the list
const defaultFile = file || Object.keys(event.data.audiovisual_files)[0];

const childProps = {
  ...Astro.props,
  includes: Astro.props.includes || [
    'media',
    'annotations',
    'label',
    'description',
  ],
  file: defaultFile,
};
---

{
  (
    <div>
      <PlayerStateNanostorePopulator
        playerId={playerId}
        isEmbed={isEmbed}
        initialFile={defaultFile}
      />
      {event.data.item_type === 'Audio' && (
        <AudioEvent
          annotationSets={annotationSets}
          event={event}
          {...childProps}
        />
      )}
      {event.data.item_type === 'Video' && (
        <VideoEvent
          annotationSets={annotationSets}
          event={event}
          {...childProps}
        />
      )}
    </div>
  )
}
