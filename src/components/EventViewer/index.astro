---
import { getCollection } from 'astro:content';
import type { Includes, SlateEventNodeProps } from '@ty/slate';
import AudioFile from './AudioFile.astro';
import VideoFile from './VideoFile.astro';
import { getEntry } from 'astro:content';
import PlayerStateNanostorePopulator from './PlayerStateNanostorePopulator';

export interface Props extends Omit<SlateEventNodeProps, 'uuid' | 'includes'> {
  end?: number;
  start?: number;
  sticky?: boolean;
  uuid: string;
  isEmbed?: boolean;
  playerId: string;
  file?: string;
  includes?: Includes[];
  isComparison?: boolean;
}

const { isEmbed, file, uuid, playerId, start, end } = Astro.props;

const event = await getEntry('events', uuid);

if (!event) {
  return null;
}

const annotationData = await getCollection('annotations');

const annotationSets = annotationData.filter(
  (an) => an.data.event_id === event.id
);

// allow a default file to be configured via props
// otherwise, use the first file in the list
const defaultFile = file || Object.keys(event.data.audiovisual_files)[0];

const childProps = {
  ...Astro.props,
  includes: Astro.props.includes || [
    'media',
    'annotations',
    'label',
    'description',
  ],
  file: defaultFile,
  event,
  annotationSets,
};
---

<div>
  <PlayerStateNanostorePopulator
    playerId={playerId}
    isEmbed={isEmbed}
    initialFile={defaultFile}
    clip={start && end
      ? {
          start,
          end,
        }
      : undefined}
    client:only='react'
  />
  {
    Object.keys(event.data.audiovisual_files).map((uuid) => {
      const avFile = event.data.audiovisual_files[uuid];

      const type = avFile.file_type || event.data.item_type;

      const Component = type === 'Audio' ? AudioFile : VideoFile;

      return <Component {...childProps} file={uuid} />;
    })
  }
</div>

<script>
  import { $pagePlayersState } from 'src/store.ts';

  const avFileDivs = Array.from(document.querySelectorAll('.av-file'));

  $pagePlayersState.listen((state, _oldState, changed) => {
    if (!changed || !state[changed]) {
      return null;
    }

    avFileDivs
      .filter((div) => {
        const playerId = div.getAttribute('data-player-id');
        return playerId === changed;
      })
      .forEach((div) => {
        const fileUuid = div.getAttribute('data-file-id');

        if (state[changed].avFileUuid === fileUuid) {
          div.classList.remove('hidden');
        } else {
          div.classList.add('hidden');
        }
      });
  });
</script>
